			.data
			.align 2
x:			.double 1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09
			.double 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19
			.double 1.20, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29
			.double 1.30, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39
			.double 1.40, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49
			.double 1.50, 1.51, 1.52, 1.53, 1.54, 1.55, 1.56, 1.57, 1.58, 1.59
			.double 1.60, 1.61, 1.62, 1.63, 1.64, 1.65, 1.66, 1.67, 1.68, 1.69
			.double 1.70, 1.71, 1.72, 1.73, 1.74, 1.75, 1.76, 1.77, 1.78, 1.79
			.double 1.80, 1.81, 1.82, 1.83, 1.84, 1.85, 1.86, 1.87, 1.88, 1.89
			.double 1.90, 1.91, 1.92, 1.93, 1.94, 1.95, 1.96, 1.97, 1.98, 1.99
			.double 2.00, 2.01, 2.02, 2.03, 2.04, 2.05, 2.06, 2.07, 2.08, 2.09
			.double 2.10, 2.11, 2.12, 2.13, 2.14, 2.15, 2.16, 2.17, 2.18, 2.19
			.double 2.20, 2.21, 2.22, 2.23, 2.24, 2.25, 2.26, 2.27, 2.28, 2.29
			.double 2.30, 2.31, 2.32, 2.33, 2.34, 2.35, 2.36, 2.37, 2.38, 2.39
			.double 2.40, 2.41, 2.42, 2.43, 2.44, 2.45, 2.46, 2.47, 2.48, 2.49
			.double 2.50, 2.51, 2.52, 2.53, 2.54, 2.55, 2.56, 2.57, 2.58, 2.59
			.double 2.60, 2.61, 2.62, 2.63, 2.64, 2.65, 2.66, 2.67, 2.68, 2.69
			.double 2.70, 2.71, 2.72, 2.73, 2.74, 2.75, 2.76, 2.77, 2.78, 2.79
			.double 2.80, 2.81, 2.82, 2.83, 2.84, 2.85, 2.86, 2.87, 2.88, 2.89
			.double 2.90, 2.91, 2.92, 2.93, 2.94, 2.95, 2.96, 2.97, 2.98, 2.99
y:			.double 1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09
			.double 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19
			.double 1.20, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29
			.double 1.30, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39
			.double 1.40, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49
			.double 1.50, 1.51, 1.52, 1.53, 1.54, 1.55, 1.56, 1.57, 1.58, 1.59
			.double 1.60, 1.61, 1.62, 1.63, 1.64, 1.65, 1.66, 1.67, 1.68, 1.69
			.double 1.70, 1.71, 1.72, 1.73, 1.74, 1.75, 1.76, 1.77, 1.78, 1.79
			.double 1.80, 1.81, 1.82, 1.83, 1.84, 1.85, 1.86, 1.87, 1.88, 1.89
			.double 1.90, 1.91, 1.92, 1.93, 1.94, 1.95, 1.96, 1.97, 1.98, 1.99
			.double 2.00, 2.01, 2.02, 2.03, 2.04, 2.05, 2.06, 2.07, 2.08, 2.09
			.double 2.10, 2.11, 2.12, 2.13, 2.14, 2.15, 2.16, 2.17, 2.18, 2.19
			.double 2.20, 2.21, 2.22, 2.23, 2.24, 2.25, 2.26, 2.27, 2.28, 2.29
			.double 2.30, 2.31, 2.32, 2.33, 2.34, 2.35, 2.36, 2.37, 2.38, 2.39
			.double 2.40, 2.41, 2.42, 2.43, 2.44, 2.45, 2.46, 2.47, 2.48, 2.49
			.double 2.50, 2.51, 2.52, 2.53, 2.54, 2.55, 2.56, 2.57, 2.58, 2.59
			.double 2.60, 2.61, 2.62, 2.63, 2.64, 2.65, 2.66, 2.67, 2.68, 2.69
			.double 2.70, 2.71, 2.72, 2.73, 2.74, 2.75, 2.76, 2.77, 2.78, 2.79
			.double 2.80, 2.81, 2.82, 2.83, 2.84, 2.85, 2.86, 2.87, 2.88, 2.89
			.double 2.90, 2.91, 2.92, 2.93, 2.94, 2.95, 2.96, 2.97, 2.98, 2.99
a:			.double 3.14159265
			.text
main:		cvm					; reset mask
			addi r1, r0, x		; r1 <- X(0) addr
			addi r2, r0, y		; r2 <- Y(0) addr
			ld f0, a			; f0 <- a
			addi r4, r1, 1592	; r4 <- X(199) addr ; [1592 = 199 * 8]
			addi r5, r0, 200	; r5 <- VL (vector length)
			addi r6, r0, 64		; r6 <- MVL (maximum vector length)
			addi r11, r0, 8		; r11 <- byte length
			div r7, r5, r6		;
			mult r8, r7, r6		;
			sub r9, r5, r8		; r9 <- VL mod MVL
			beqz r9, loopsetup	; PC <- loopsetup if (VL mod MVL)==0
prologue:	movi2s vlr, r9		; vlr <- VL mod MVL
			lv v0, 0(r1)		; v0 <- [X(0),...,X((VL mod MVL) - 1)]
			multsv v1, f0, v0	; v1 <- [a * X(0),...,a * X((VL mod MVL) - 1)]
			lv v2, 0(r2)		; v2 <- [Y(0),...,Y((VL mod MVL) - 1)]
			addv v2, v1, v2		; v2 <- [a * X(0) + Y(0),...,a * X((VL mod MVL) - 1) + Y((VL mod MVL) - 1)]
			sv 0(r2), v2		; [Y(0),...,Y((VL mod MVL) - 1)] <- v2
			sgt r3, r6, r5		; r3 <- (VL < MVL)?
			bnez r3, end		; PC <- end if VL < MVL
			mult r10, r9, r11	; r10 <- (VL mod MVL) * 8 [bytes]
			add r1, r1, r10		; r1 <- X(VL mod MVL) addr
			add r2, r2, r10		; r2 <- Y(VL mod MVL) addr
loopsetup:	movi2s vlr, r6		; VLR <- MVL
			mult r10, r6, r11	; r10 <- MVL * 8 [bytes]
loop:		lv v0, 0(r1)		; v0 <- [X(i),...,X(i + MVL - 1)]
			multsv v1, f0, v0	; v1 <- [a * X(i),...,a * X((i + MVL - 1)]
			lv v2, 0(r2)		; v2 <- [Y(i),...,Y((i + MVL - 1)]
			addv v2, v1, v2		; v2 <- [a * X(i) + Y(i),...,a * X(i + MVL - 1) + Y(i + MVL - 1)]
			sv 0(r2), v2		; [Y(i),...,Y(i + MVL - 1)] <- v2
			add r1, r1, r10		; r1 <- X(i + MVL) addr
			add r2, r2, r10		; r2 <- Y(i + MVL) addr
			sgt r3, r1, r4		; r3 <- (X(i + MVL) addr > X(199) addr)?
			beqz r3, loop		; PC <- loop if r3==0
end:		trap 0				; end